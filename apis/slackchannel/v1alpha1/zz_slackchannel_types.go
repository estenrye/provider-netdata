// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SlackChannelInitParameters struct {

	// (Boolean) The enabled status of the Slack notification
	// The enabled status of the Slack notification
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) The name of the Slack notification
	// The name of the Slack notification
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (List of String) The notification options for the Slack. Valid values are: CRITICAL, WARNING, CLEAR, REACHABLE, UNREACHABLE
	// The notification options for the Slack. Valid values are: `CRITICAL`, `WARNING`, `CLEAR`, `REACHABLE`, `UNREACHABLE`
	Notifications []*string `json:"notifications,omitempty" tf:"notifications,omitempty"`

	// (Number) The time interval for the Slack notification to be repeated. The interval is presented in minutes and should be between 30 and 1440, or 0 to avoid repetition, which is the default.
	// The time interval for the Slack notification to be repeated. The interval is presented in minutes and should be between 30 and 1440, or 0 to avoid repetition, which is the default.
	RepeatNotificationMin *float64 `json:"repeatNotificationMin,omitempty" tf:"repeat_notification_min,omitempty"`

	// (List of String) The list of room IDs to set the Slack notification. If the rooms list is null, the Slack notification will be applied to All rooms
	// The list of room IDs to set the Slack notification. If the rooms list is null, the Slack notification will be applied to `All rooms`
	RoomsID []*string `json:"roomsId,omitempty" tf:"rooms_id,omitempty"`

	// (String) The ID of the space for the Slack notification
	// The ID of the space for the Slack notification
	// +crossplane:generate:reference:type=github.com/estenrye/provider-netdata/apis/space/v1alpha1.Space
	SpaceID *string `json:"spaceId,omitempty" tf:"space_id,omitempty"`

	// Reference to a Space in space to populate spaceId.
	// +kubebuilder:validation:Optional
	SpaceIDRef *v1.Reference `json:"spaceIdRef,omitempty" tf:"-"`

	// Selector for a Space in space to populate spaceId.
	// +kubebuilder:validation:Optional
	SpaceIDSelector *v1.Selector `json:"spaceIdSelector,omitempty" tf:"-"`

	// (String, Sensitive) Slack webhook URL
	// Slack webhook URL
	WebhookURLSecretRef v1.SecretKeySelector `json:"webhookUrlSecretRef" tf:"-"`
}

type SlackChannelObservation struct {

	// (Boolean) The enabled status of the Slack notification
	// The enabled status of the Slack notification
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) The ID of the Slack notification
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) The name of the Slack notification
	// The name of the Slack notification
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (List of String) The notification options for the Slack. Valid values are: CRITICAL, WARNING, CLEAR, REACHABLE, UNREACHABLE
	// The notification options for the Slack. Valid values are: `CRITICAL`, `WARNING`, `CLEAR`, `REACHABLE`, `UNREACHABLE`
	Notifications []*string `json:"notifications,omitempty" tf:"notifications,omitempty"`

	// (Number) The time interval for the Slack notification to be repeated. The interval is presented in minutes and should be between 30 and 1440, or 0 to avoid repetition, which is the default.
	// The time interval for the Slack notification to be repeated. The interval is presented in minutes and should be between 30 and 1440, or 0 to avoid repetition, which is the default.
	RepeatNotificationMin *float64 `json:"repeatNotificationMin,omitempty" tf:"repeat_notification_min,omitempty"`

	// (List of String) The list of room IDs to set the Slack notification. If the rooms list is null, the Slack notification will be applied to All rooms
	// The list of room IDs to set the Slack notification. If the rooms list is null, the Slack notification will be applied to `All rooms`
	RoomsID []*string `json:"roomsId,omitempty" tf:"rooms_id,omitempty"`

	// (String) The ID of the space for the Slack notification
	// The ID of the space for the Slack notification
	SpaceID *string `json:"spaceId,omitempty" tf:"space_id,omitempty"`
}

type SlackChannelParameters struct {

	// (Boolean) The enabled status of the Slack notification
	// The enabled status of the Slack notification
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) The name of the Slack notification
	// The name of the Slack notification
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (List of String) The notification options for the Slack. Valid values are: CRITICAL, WARNING, CLEAR, REACHABLE, UNREACHABLE
	// The notification options for the Slack. Valid values are: `CRITICAL`, `WARNING`, `CLEAR`, `REACHABLE`, `UNREACHABLE`
	// +kubebuilder:validation:Optional
	Notifications []*string `json:"notifications,omitempty" tf:"notifications,omitempty"`

	// (Number) The time interval for the Slack notification to be repeated. The interval is presented in minutes and should be between 30 and 1440, or 0 to avoid repetition, which is the default.
	// The time interval for the Slack notification to be repeated. The interval is presented in minutes and should be between 30 and 1440, or 0 to avoid repetition, which is the default.
	// +kubebuilder:validation:Optional
	RepeatNotificationMin *float64 `json:"repeatNotificationMin,omitempty" tf:"repeat_notification_min,omitempty"`

	// (List of String) The list of room IDs to set the Slack notification. If the rooms list is null, the Slack notification will be applied to All rooms
	// The list of room IDs to set the Slack notification. If the rooms list is null, the Slack notification will be applied to `All rooms`
	// +kubebuilder:validation:Optional
	RoomsID []*string `json:"roomsId,omitempty" tf:"rooms_id,omitempty"`

	// (String) The ID of the space for the Slack notification
	// The ID of the space for the Slack notification
	// +crossplane:generate:reference:type=github.com/estenrye/provider-netdata/apis/space/v1alpha1.Space
	// +kubebuilder:validation:Optional
	SpaceID *string `json:"spaceId,omitempty" tf:"space_id,omitempty"`

	// Reference to a Space in space to populate spaceId.
	// +kubebuilder:validation:Optional
	SpaceIDRef *v1.Reference `json:"spaceIdRef,omitempty" tf:"-"`

	// Selector for a Space in space to populate spaceId.
	// +kubebuilder:validation:Optional
	SpaceIDSelector *v1.Selector `json:"spaceIdSelector,omitempty" tf:"-"`

	// (String, Sensitive) Slack webhook URL
	// Slack webhook URL
	// +kubebuilder:validation:Optional
	WebhookURLSecretRef v1.SecretKeySelector `json:"webhookUrlSecretRef" tf:"-"`
}

// SlackChannelSpec defines the desired state of SlackChannel
type SlackChannelSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SlackChannelParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider SlackChannelInitParameters `json:"initProvider,omitempty"`
}

// SlackChannelStatus defines the observed state of SlackChannel.
type SlackChannelStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SlackChannelObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// SlackChannel is the Schema for the SlackChannels API. Resource for managing centralized notifications for Slack. Available only in paid plans.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,netdata}
type SlackChannel struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.enabled) || (has(self.initProvider) && has(self.initProvider.enabled))",message="spec.forProvider.enabled is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.notifications) || (has(self.initProvider) && has(self.initProvider.notifications))",message="spec.forProvider.notifications is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.webhookUrlSecretRef)",message="spec.forProvider.webhookUrlSecretRef is a required parameter"
	Spec   SlackChannelSpec   `json:"spec"`
	Status SlackChannelStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SlackChannelList contains a list of SlackChannels
type SlackChannelList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SlackChannel `json:"items"`
}

// Repository type metadata.
var (
	SlackChannel_Kind             = "SlackChannel"
	SlackChannel_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SlackChannel_Kind}.String()
	SlackChannel_KindAPIVersion   = SlackChannel_Kind + "." + CRDGroupVersion.String()
	SlackChannel_GroupVersionKind = CRDGroupVersion.WithKind(SlackChannel_Kind)
)

func init() {
	SchemeBuilder.Register(&SlackChannel{}, &SlackChannelList{})
}
