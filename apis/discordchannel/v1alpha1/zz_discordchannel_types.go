// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DiscordChannelInitParameters struct {

	// (String) Discord channel thread name required if channel type is forum
	// Discord channel thread name required if channel type is `forum`
	ChannelThread *string `json:"channelThread,omitempty" tf:"channel_thread,omitempty"`

	// (String) Discord channel type. Valid values are: text, forum
	// Discord channel type. Valid values are: `text`, `forum`
	ChannelType *string `json:"channelType,omitempty" tf:"channel_type,omitempty"`

	// (Boolean) The enabled status of the Discord notification
	// The enabled status of the Discord notification
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) The name of the Discord notification
	// The name of the Discord notification
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (List of String) The notification options for the Discord. Valid values are: CRITICAL, WARNING, CLEAR, REACHABLE, UNREACHABLE
	// The notification options for the Discord. Valid values are: `CRITICAL`, `WARNING`, `CLEAR`, `REACHABLE`, `UNREACHABLE`
	Notifications []*string `json:"notifications,omitempty" tf:"notifications,omitempty"`

	// (Number) The time interval for the Discord notification to be repeated. The interval is presented in minutes and should be between 30 and 1440, or 0 to avoid repetition, which is the default.
	// The time interval for the Discord notification to be repeated. The interval is presented in minutes and should be between 30 and 1440, or 0 to avoid repetition, which is the default.
	RepeatNotificationMin *float64 `json:"repeatNotificationMin,omitempty" tf:"repeat_notification_min,omitempty"`

	// (List of String) The list of room IDs to set the Discord notification. If the rooms list is null, the Discord notification will be applied to All rooms
	// The list of room IDs to set the Discord notification. If the rooms list is null, the Discord notification will be applied to `All rooms`
	// +crossplane:generate:reference:type=github.com/estenrye/provider-netdata/apis/room/v1alpha1.Room
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	RoomsID []*string `json:"roomsId,omitempty" tf:"rooms_id,omitempty"`

	// References to Room in room to populate roomsId.
	// +kubebuilder:validation:Optional
	RoomsIDRefs []v1.Reference `json:"roomsIdRefs,omitempty" tf:"-"`

	// Selector for a list of Room in room to populate roomsId.
	// +kubebuilder:validation:Optional
	RoomsIDSelector *v1.Selector `json:"roomsIdSelector,omitempty" tf:"-"`

	// (String) The ID of the space for the Discord notification
	// The ID of the space for the Discord notification
	// +crossplane:generate:reference:type=github.com/estenrye/provider-netdata/apis/space/v1alpha1.Space
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	SpaceID *string `json:"spaceId,omitempty" tf:"space_id,omitempty"`

	// Reference to a Space in space to populate spaceId.
	// +kubebuilder:validation:Optional
	SpaceIDRef *v1.Reference `json:"spaceIdRef,omitempty" tf:"-"`

	// Selector for a Space in space to populate spaceId.
	// +kubebuilder:validation:Optional
	SpaceIDSelector *v1.Selector `json:"spaceIdSelector,omitempty" tf:"-"`

	// (String, Sensitive) Discord webhook URL
	// Discord webhook URL
	WebhookURLSecretRef v1.SecretKeySelector `json:"webhookUrlSecretRef" tf:"-"`
}

type DiscordChannelObservation struct {

	// (String) Discord channel thread name required if channel type is forum
	// Discord channel thread name required if channel type is `forum`
	ChannelThread *string `json:"channelThread,omitempty" tf:"channel_thread,omitempty"`

	// (String) Discord channel type. Valid values are: text, forum
	// Discord channel type. Valid values are: `text`, `forum`
	ChannelType *string `json:"channelType,omitempty" tf:"channel_type,omitempty"`

	// (Boolean) The enabled status of the Discord notification
	// The enabled status of the Discord notification
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) The ID of the Discord notification
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) The name of the Discord notification
	// The name of the Discord notification
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (List of String) The notification options for the Discord. Valid values are: CRITICAL, WARNING, CLEAR, REACHABLE, UNREACHABLE
	// The notification options for the Discord. Valid values are: `CRITICAL`, `WARNING`, `CLEAR`, `REACHABLE`, `UNREACHABLE`
	Notifications []*string `json:"notifications,omitempty" tf:"notifications,omitempty"`

	// (Number) The time interval for the Discord notification to be repeated. The interval is presented in minutes and should be between 30 and 1440, or 0 to avoid repetition, which is the default.
	// The time interval for the Discord notification to be repeated. The interval is presented in minutes and should be between 30 and 1440, or 0 to avoid repetition, which is the default.
	RepeatNotificationMin *float64 `json:"repeatNotificationMin,omitempty" tf:"repeat_notification_min,omitempty"`

	// (List of String) The list of room IDs to set the Discord notification. If the rooms list is null, the Discord notification will be applied to All rooms
	// The list of room IDs to set the Discord notification. If the rooms list is null, the Discord notification will be applied to `All rooms`
	RoomsID []*string `json:"roomsId,omitempty" tf:"rooms_id,omitempty"`

	// (String) The ID of the space for the Discord notification
	// The ID of the space for the Discord notification
	SpaceID *string `json:"spaceId,omitempty" tf:"space_id,omitempty"`
}

type DiscordChannelParameters struct {

	// (String) Discord channel thread name required if channel type is forum
	// Discord channel thread name required if channel type is `forum`
	// +kubebuilder:validation:Optional
	ChannelThread *string `json:"channelThread,omitempty" tf:"channel_thread,omitempty"`

	// (String) Discord channel type. Valid values are: text, forum
	// Discord channel type. Valid values are: `text`, `forum`
	// +kubebuilder:validation:Optional
	ChannelType *string `json:"channelType,omitempty" tf:"channel_type,omitempty"`

	// (Boolean) The enabled status of the Discord notification
	// The enabled status of the Discord notification
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// (String) The name of the Discord notification
	// The name of the Discord notification
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (List of String) The notification options for the Discord. Valid values are: CRITICAL, WARNING, CLEAR, REACHABLE, UNREACHABLE
	// The notification options for the Discord. Valid values are: `CRITICAL`, `WARNING`, `CLEAR`, `REACHABLE`, `UNREACHABLE`
	// +kubebuilder:validation:Optional
	Notifications []*string `json:"notifications,omitempty" tf:"notifications,omitempty"`

	// (Number) The time interval for the Discord notification to be repeated. The interval is presented in minutes and should be between 30 and 1440, or 0 to avoid repetition, which is the default.
	// The time interval for the Discord notification to be repeated. The interval is presented in minutes and should be between 30 and 1440, or 0 to avoid repetition, which is the default.
	// +kubebuilder:validation:Optional
	RepeatNotificationMin *float64 `json:"repeatNotificationMin,omitempty" tf:"repeat_notification_min,omitempty"`

	// (List of String) The list of room IDs to set the Discord notification. If the rooms list is null, the Discord notification will be applied to All rooms
	// The list of room IDs to set the Discord notification. If the rooms list is null, the Discord notification will be applied to `All rooms`
	// +crossplane:generate:reference:type=github.com/estenrye/provider-netdata/apis/room/v1alpha1.Room
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	RoomsID []*string `json:"roomsId,omitempty" tf:"rooms_id,omitempty"`

	// References to Room in room to populate roomsId.
	// +kubebuilder:validation:Optional
	RoomsIDRefs []v1.Reference `json:"roomsIdRefs,omitempty" tf:"-"`

	// Selector for a list of Room in room to populate roomsId.
	// +kubebuilder:validation:Optional
	RoomsIDSelector *v1.Selector `json:"roomsIdSelector,omitempty" tf:"-"`

	// (String) The ID of the space for the Discord notification
	// The ID of the space for the Discord notification
	// +crossplane:generate:reference:type=github.com/estenrye/provider-netdata/apis/space/v1alpha1.Space
	// +crossplane:generate:reference:extractor=github.com/crossplane/upjet/pkg/resource.ExtractResourceID()
	// +kubebuilder:validation:Optional
	SpaceID *string `json:"spaceId,omitempty" tf:"space_id,omitempty"`

	// Reference to a Space in space to populate spaceId.
	// +kubebuilder:validation:Optional
	SpaceIDRef *v1.Reference `json:"spaceIdRef,omitempty" tf:"-"`

	// Selector for a Space in space to populate spaceId.
	// +kubebuilder:validation:Optional
	SpaceIDSelector *v1.Selector `json:"spaceIdSelector,omitempty" tf:"-"`

	// (String, Sensitive) Discord webhook URL
	// Discord webhook URL
	// +kubebuilder:validation:Optional
	WebhookURLSecretRef v1.SecretKeySelector `json:"webhookUrlSecretRef" tf:"-"`
}

// DiscordChannelSpec defines the desired state of DiscordChannel
type DiscordChannelSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DiscordChannelParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider DiscordChannelInitParameters `json:"initProvider,omitempty"`
}

// DiscordChannelStatus defines the observed state of DiscordChannel.
type DiscordChannelStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DiscordChannelObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// DiscordChannel is the Schema for the DiscordChannels API. Resource for managing centralized notifications for Discord. Available only in paid plans.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,netdata}
type DiscordChannel struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.channelType) || (has(self.initProvider) && has(self.initProvider.channelType))",message="spec.forProvider.channelType is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.enabled) || (has(self.initProvider) && has(self.initProvider.enabled))",message="spec.forProvider.enabled is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.notifications) || (has(self.initProvider) && has(self.initProvider.notifications))",message="spec.forProvider.notifications is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.webhookUrlSecretRef)",message="spec.forProvider.webhookUrlSecretRef is a required parameter"
	Spec   DiscordChannelSpec   `json:"spec"`
	Status DiscordChannelStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DiscordChannelList contains a list of DiscordChannels
type DiscordChannelList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DiscordChannel `json:"items"`
}

// Repository type metadata.
var (
	DiscordChannel_Kind             = "DiscordChannel"
	DiscordChannel_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DiscordChannel_Kind}.String()
	DiscordChannel_KindAPIVersion   = DiscordChannel_Kind + "." + CRDGroupVersion.String()
	DiscordChannel_GroupVersionKind = CRDGroupVersion.WithKind(DiscordChannel_Kind)
)

func init() {
	SchemeBuilder.Register(&DiscordChannel{}, &DiscordChannelList{})
}
