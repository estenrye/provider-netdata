// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by angryjet. DO NOT EDIT.

package v1alpha1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	resource "github.com/crossplane/upjet/pkg/resource"
	v1alpha1 "github.com/estenrye/provider-netdata/apis/room/v1alpha1"
	v1alpha11 "github.com/estenrye/provider-netdata/apis/space/v1alpha1"
	errors "github.com/pkg/errors"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this PagerdutyChannel.
func (mg *PagerdutyChannel) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var mrsp reference.MultiResolutionResponse
	var err error

	mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
		CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.RoomsID),
		Extract:       resource.ExtractResourceID(),
		References:    mg.Spec.ForProvider.RoomsIDRefs,
		Selector:      mg.Spec.ForProvider.RoomsIDSelector,
		To: reference.To{
			List:    &v1alpha1.RoomList{},
			Managed: &v1alpha1.Room{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.RoomsID")
	}
	mg.Spec.ForProvider.RoomsID = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.RoomsIDRefs = mrsp.ResolvedReferences

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.SpaceID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.ForProvider.SpaceIDRef,
		Selector:     mg.Spec.ForProvider.SpaceIDSelector,
		To: reference.To{
			List:    &v1alpha11.SpaceList{},
			Managed: &v1alpha11.Space{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SpaceID")
	}
	mg.Spec.ForProvider.SpaceID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.SpaceIDRef = rsp.ResolvedReference

	mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
		CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.RoomsID),
		Extract:       resource.ExtractResourceID(),
		References:    mg.Spec.InitProvider.RoomsIDRefs,
		Selector:      mg.Spec.InitProvider.RoomsIDSelector,
		To: reference.To{
			List:    &v1alpha1.RoomList{},
			Managed: &v1alpha1.Room{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.RoomsID")
	}
	mg.Spec.InitProvider.RoomsID = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.InitProvider.RoomsIDRefs = mrsp.ResolvedReferences

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.SpaceID),
		Extract:      resource.ExtractResourceID(),
		Reference:    mg.Spec.InitProvider.SpaceIDRef,
		Selector:     mg.Spec.InitProvider.SpaceIDSelector,
		To: reference.To{
			List:    &v1alpha11.SpaceList{},
			Managed: &v1alpha11.Space{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.SpaceID")
	}
	mg.Spec.InitProvider.SpaceID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.SpaceIDRef = rsp.ResolvedReference

	return nil
}
